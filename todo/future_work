web_ui

just after the web ui is finish start using dynStruct in real ctf chall to find out more idea for enhancement.

optimization of actual implem:
	     	inline instrumentaiton instead of clean call each time
		alloc for multiple access, orig, block each time to not have to call alloc every time
pointeur detection:
		ptr to heap data: easy just look if addr in block tree
		ptr to func: easys for binary with symbol, for strip binary check if prologue at addr ? just check if addr it's in text section ?
		for other data ptr: check in what section is the addr ?
port to windows
port to mac os
port to arm/arm64
add a sort of time notion:
      	      	not a timer (too time consuming)
		a general timer ? (for all access) is a 64 bit number enough for importante program ?
		a block timer + access timer per block ?
		with the time notion build a sort of timelaps of memory with each access = 1 step. (for this general timer is better)
be more flexible with allocator func (be able to work with other func than malloc/realloc/free but with same proto). maybe a sort of config file to be able to work with any kind of allocator.
wrap mmap and use new memory as a big block (not for structure recovering)
support shared memory
check if it work correctly with multi-thread program
check what is the behavior with forking program
search other usage of the data extract
check what is the behavior with cpp program (object are allocated via malloc ?, ...)
check other language like rust, go, ... (I think most of them don't call malloc but have their own allocator system, mmap wrapping can help but it's not very precise)
check the behavior of the plt part on diverse compiler (gcc work well, so test at least clang and tcc)
check if write instruction handle signed number, float number, ptr, ... and store this in a flag in the orig struct. Use this to have more accurate type on structure recovering.